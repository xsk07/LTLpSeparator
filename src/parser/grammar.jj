/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. grammar.jj */
/*@egen*/options { IGNORE_CASE = false; }

PARSER_BEGIN(Parser)

package parser;

    public class Parser/*@bgen(jjtree)*/implements ParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTParserState jjtree = new JJTParserState();

/*@egen*/

    /* Main entry point */
    public static void main(String args[]) {
        System.out.println("Reading from standard input...");
        Parser t = new Parser(System.in);
        try {
            SimpleNode n = t.Input();
            n.dump("");
            System.out.println("Thank you.");
        } catch (Exception e) {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }
}

PARSER_END(Parser)

SKIP:
{
   " "
|  "\t"
|  "\n"
|  "\r"
}

/* RESERVED WORDS AND LITERALS */

TOKEN :
{
  <LPAREN: "(">
| <RPAREN: ")">
| <AND: "&">
| <OR: "|">
| <IMPL: "->">
| <EQUIV: "<->">
}

TOKEN : {
 <ATOM: <TRUE> | <FALSE> | ["a"-"z"] (["a"-"z","0"-"9","_"])* >
| <#TRUE: "true">
| <#FALSE: "false">
}

TOKEN : {
 <UNARY: <NOT> | <ONCE> | <HIST> | <YEST> | <FIN> | <GLOB> | <NEXT> >
 | <#NOT: "!">
 | <#ONCE: "O">
 | <#HIST: "H">
 | <#YEST: "Y">
 | <#FIN: "F">
 | <#GLOB: "G">
 | <#NEXT: "X">
}

TOKEN : {
 <BINARYTEMP: <UNTIL> | <SINCE> | <UNLESS> >
| <#UNTIL: "U">
| <#SINCE: "S">
| <#UNLESS: "W">
}

/* PRODUCTION RULES */

// Root production
SimpleNode Input() : {/*@bgen(jjtree) Input */
  SimpleNode jjtn000 = new SimpleNode(JJTINPUT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Input */
    try {
/*@egen*/
    ltl_expr() <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {return jjtn000;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}


void ltl_expr()       : {}
{
  ltl_equiv()
}


void ltl_equiv()       :
{ Token t; }
{
  ltl_impl() (t = <EQUIV> ltl_impl()/*@bgen(jjtree) #Equiv( 2) */
                                     {
                                       SimpleNode jjtn001 = new SimpleNode(JJTEQUIV);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                     }
                                     try {
/*@egen*//*@bgen(jjtree)*/
                                     {
                                       jjtree.closeNodeScope(jjtn001,  2);
                                       jjtc001 = false;
                                     }
/*@egen*/ { jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                       }
                                     }
/*@egen*/          )*
}


void ltl_impl()       :
{ Token t; }
{
  ltl_or() (t = <IMPL> ltl_or()/*@bgen(jjtree) #Impl( 2) */
                                {
                                  SimpleNode jjtn001 = new SimpleNode(JJTIMPL);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtc001 = false;
                                }
/*@egen*/ { jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/         )*
}


void ltl_or()       :
{ Token t; }
{
  ltl_and() (t = <OR> ltl_and()/*@bgen(jjtree) #Or( 2) */
                                {
                                  SimpleNode jjtn001 = new SimpleNode(JJTOR);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                }
                                try {
/*@egen*//*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn001,  2);
                                  jjtc001 = false;
                                }
/*@egen*/ { jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001,  2);
                                  }
                                }
/*@egen*/       )*
}


void ltl_and()      :
{ Token t; }
{
  ltl_binary() (t = <AND> ltl_binary()/*@bgen(jjtree) #And( 2) */
                                       {
                                         SimpleNode jjtn001 = new SimpleNode(JJTAND);
                                         boolean jjtc001 = true;
                                         jjtree.openNodeScope(jjtn001);
                                       }
                                       try {
/*@egen*//*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn001,  2);
                                         jjtc001 = false;
                                       }
/*@egen*/ { jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                       } finally {
                                         if (jjtc001) {
                                           jjtree.closeNodeScope(jjtn001,  2);
                                         }
                                       }
/*@egen*/        )*
}


void ltl_binary()       :
{ Token t; }
{
  ltl_unary() (t = <BINARYTEMP> ltl_unary()/*@bgen(jjtree) #BinaryTemp( 2) */
                                            {
                                              SimpleNode jjtn001 = new SimpleNode(JJTBINARYTEMP);
                                              boolean jjtc001 = true;
                                              jjtree.openNodeScope(jjtn001);
                                            }
                                            try {
/*@egen*//*@bgen(jjtree)*/
                                            {
                                              jjtree.closeNodeScope(jjtn001,  2);
                                              jjtc001 = false;
                                            }
/*@egen*/ { jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
                                            } finally {
                                              if (jjtc001) {
                                                jjtree.closeNodeScope(jjtn001,  2);
                                              }
                                            }
/*@egen*/               )*
}


void ltl_unary()       :
{ Token t; }
{
  ltl_atom()
  | t = <UNARY> ltl_unary()/*@bgen(jjtree) #Unary( 1) */
                            {
                              SimpleNode jjtn001 = new SimpleNode(JJTUNARY);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                            }
                            try {
/*@egen*//*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn001,  1);
                              jjtc001 = false;
                            }
/*@egen*/ {jjtn001.jjtSetValue(t.image);}/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001,  1);
                              }
                            }
/*@egen*/           
}


void ltl_atom()       :
{ Token t; }
{
  t = <ATOM>/*@bgen(jjtree) Atom */
             {
               SimpleNode jjtn001 = new SimpleNode(JJTATOM);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
             }
             try {
/*@egen*//*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn001, true);
               jjtc001 = false;
             }
/*@egen*/ { jjtn001.jjtSetValue(t.image); }/*@bgen(jjtree)*/
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
               }
             }
/*@egen*/      
  | <LPAREN> ltl_expr() <RPAREN>
}